<File version="3.2">
  <FileID>3fc5d331-8768-4912-94f0-995689f82cb9</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADVLSURBVHhe7d13jJz3ned57RiY++cOs1jgDjjM
H7vYBfZudrB3wN1smLmdHdmz47FFWbYlK1gSJVEUJdIUg5hzzjnnHMTcZDfZOeecc845sas6kpQ+
9/s9zaaazZZFUwxVrPfbeKG6uuupqi4Z/H2fp0K/QkRERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/YqZ/85Cdp/+7f/pu0
WTNmpS1evDRt4cLFAADAayxJW7p0Wdovf/nPaX/+53+eZtZ264/3k5/8WeE///znOnLinFLyKlVS
16Wimg4AAOAlims7ndOI+DTNmDFT//Iv/kL3l/nv79/+m3+dduT4WeVUdSg2p1qRmeWKAgAAXsOu
3VZKSYuSsor1+oQJPzwAzPhyVlpKXpXi8moUm10JAAC8VExWhXLNDv3ps1//8ACwdMmytMpml6Kz
qxSbAwAAvFWMGQIK6rp16cr1Hx4AlixeklbReNtsWK34XAAAvE9CXo2SCuqUXPjj2eux12evNzG/
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
64cHgE8nf5ZzzVzwwqVrZmIAAADezM//ltauW//DAwARERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE90iuv/P8hA199SQ77
VQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$BitsCopy_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $BitsCopy -Theme Dark
	$RTB_Output.Text = "BITSCopy Intilised."
	$RTB_Output.ForeColor = 'ForestGreen'
	
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $BitsCopy -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $BitsCopy -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$Source_Browse_MouseClick=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$Source_FBMdialog.ShowDialog()
	$TB_Source.Text = $Source_FBMdialog.SelectedPath
	$statusbar1.Text = "Source selected: " + $Source_FBMdialog.SelectedPath
	$RTB_Output.Text = $RTB_Output.Text + "`nSource selected: " + $Source_FBMdialog.SelectedPath
	$Destination_Browse.Enabled = $true
}

$Destination_Browse_MouseClick=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	$Dest_FBMdialog.ShowDialog()
	$TB_Destination.Text = $Dest_FBMdialog.SelectedPath
	$statusbar1.Text = "Destination selected: "+$Dest_FBMdialog.SelectedPath
	$RTB_Output.Text = $RTB_Output.Text + "`nDestination selected: " + $Dest_FBMdialog.SelectedPath
	$BTN_StartCopy.Enabled = $true
	
}

$BTN_StartCopy_MouseClick=[System.Windows.Forms.MouseEventHandler]{
	#TODO: Place custom script here
	$Source = $TB_Source.Text
	$Destination = $TB_Destination.text
	$dirs = Get-ChildItem -Path $Source -Recurse -directory | select Name, FullName
	if ($dirs.count -gt 0) {
		foreach ($dir in $dirs)
		{
			$folder = ($dir.FullName).Replace($source, "")
			$destfolder = Join-Path -Path $Destination -ChildPath $folder
			
			if (!(Test-Path $destfolder)) { New-Item -Path $Destination -Name $folder -ItemType directory; $RTB_Output.Text = $RTB_Output.Text + "`nCreating Folder structure: $folder in $($TB_Destination.Text)" }
			$files = Get-ChildItem -Path "$($dir.fullname)\" -Recurse -file | select Name, FullName
			if ($files.Count -eq 0)
			{
				#No files to backup
				$RTB_Output.Text = $RTB_Output.Text + "`nNo files to copy"
				return
			}
			else
			{
				$progressbar1.Show()
				$progressbar1.Maximum = $files.Count
				$progressbar1.Step = 1
				$progressbar1.Value = 0
				
				$bitsitems = foreach ($file in $files)
				{
					$statusbar1.Text = "Transferring: $($file.name) to $destfolder"
					if ($CB_Overwrite.Checked)
					{
						Start-BitsTransfer -Source $($file.fullname) -Destination $destfolder
					}
					else
					{
						Start-BitsTransfer -Source $($file.fullname) -Destination $destfolder -force
					}
					$progressbar1.Increment(1)
					$RTB_Output.Text = $RTB_Output.Text + "`nTransferring: $($file.name) to $destfolder"
				}
				$bitsitems | Get-BitsTransfer | Where-Object { $($file.fullname).JobState -ne 'Transferred' }
				$Bitsitems | Get-BitsTransfer | Where-Object { $($file.fullname).JobState -eq 'Transferred' } | Complete-BitsTransfer
			}
		}
		
	} else {
		$files = Get-ChildItem -Path $Source -Recurse -file | select Name, FullName
		if ($files.Count -eq 0)
		{
			#No files to backup
			$RTB_Output.Text = $RTB_Output.Text + "`nNo files to copy"
			return
		}
		else
		{
			$progressbar1.Show()
			$progressbar1.Maximum = $files.Count
			$progressbar1.Step = 1
			$progressbar1.Value = 0
			
			$bitsitems = foreach ($file in $files)
			{
				$statusbar1.Text = "Transferring: $($file.name) to $Destination"
				if ($CB_Overwrite.Checked)
				{
					Start-BitsTransfer -Source $($file.fullname) -Destination $Destination
				}
				else
				{
					Start-BitsTransfer -Source $($file.fullname) -Destination $Destination -force
				}
				$progressbar1.Increment(1)
				$RTB_Output.Text = $RTB_Output.Text + "`nTransferring: $($file.name) to $Destination"
			}
			$bitsitems | Get-BitsTransfer | Where-Object { $($file.fullname).JobState -ne 'Transferred' }
			$Bitsitems | Get-BitsTransfer | Where-Object { $($file.fullname).JobState -eq 'Transferred' } | Complete-BitsTransfer
		}
		
	}
	$progressbar1.Hide()
	$RTB_Output.Text = $RTB_Output.Text + "`nfile transfers completed."
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>